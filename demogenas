#!/bin/bash

set -e

usage() {
        echo -e "\nWelcome to demogenas. Your are using Git commit: $commit"
        echo
        echo "Usage: $0 [-m <runmode>] [-t <submission_system>] [-c <cluster_config_file>] [-v]"
        echo
        echo "Mandatory:"
	echo "  -m <runmode> Determine how far the pipeline should run. Options: assembly, all. Default: all"
        echo "  -t <submission_system> Specify available submission system. Options: sge, slurm, torque, serial (no submission system)."
        echo -e "\nOptional:"
	echo "  -c <cluster_config_file> Path to cluster config file in YAML format (required if submission system != serial). "
        echo -e "\nExpert:"
        echo "  -s <snakemake_args> Additional arguments passed on to the snakemake command (optional)."
        echo "  -i \"<singularity_args>\" Additional arguments passed on to singularity (optional)."
	echo
	echo "  --dry Invokes a dry-run. Corresponds to: snakemake -n"
	echo "  --reset. Use this option to cancel all remaining jobs from this snakemake command without cancelling other cluster jobs. This is useful if any jobs fail to produce the desired output."
	#echo "  --report This creates an overview report of the run."
	#echo "  --setup Will download the genomes and prepare the pipeline to run."
	#echo "  --remove Resets the pipeline. Will delete all results, logs and checkpoints."
	echo
        1>&2; exit 1; }

version() {
        echo "$0 Git commit: $commit"
        exit 0
}
CLUSTER=""
CLUSTER_CONFIg=""
SETUP=""
REPORT=""
DRY=""
RESET="FALSE"
RUNMODE="all"
NJOBS="10001"
commit=$(git rev-parse --short HEAD)
STDSMARGS="--notemp --latency-wait 60"
CFILE="data/config.yaml"

while getopts ":m:vt:c:s:i:-:" option;
        do
                case "${option}"
                in
                        m) RUNMODE=${OPTARG};;
                        t) CLUSTER=${OPTARG};;
                        c) CLUSTER_CONFIG=${OPTARG};;
                        s) SM_ARGS=${OPTARG};;
                        i) SI_ARGS=${OPTARG};;
                        v) version;;
			-) LONG_OPTARG="${OPTARG#*}"
				case $OPTARG in
					dry) DRY="-n" ;;
					threads=*) THREADS=${OPTARG#*=};;
					select=*) SELECT=${OPTARG#*=};;
					configfile=*) CFILE=${OPTARG#*=};;
					'' ) break ;;
					*) echo "Illegal option --$OPTARG" >&2; usage; exit 2 ;;
				esac ;;	
                        *) echo "Illegal option --$OPTARG" >&2; usage;;
                        ?) echo "Illegal option --$OPTARG" >&2 usage;;
                esac
        done
#SM_ARGS="--quiet"
if [ $OPTIND -eq 1 ]; then usage; fi

if [[ ! -z $THREADS ]]; then NJOBS=$THREADS; fi
# make sure these directories exist before submission because they are needed as singularity bind points
#if [[ ! -d .usr_tmp ]]; then mkdir .usr_tmp; fi 
#if [[ ! -d .conda_pkg_tmp ]]; then mkdir .conda_pkg_tmp; fi
if [[ $RESET == "TRUE" ]]; then
	grep -o -P 'batch job\K.{1,8}' log/submission.txt > log/sub_ids.txt
	if [[ $CLUSTER == "slurm" ]]; then
		cat log/sub_ids.txt | while read line; do scancel $line; done
	elif [[ $CLUSTER == "sge" ]]; then
		cat log/sub_ids.txt | while read line; do qdel $line; done
	elif [[ $CLUSTER == "torque" ]]; then
		cat log/sub_ids.txt | while read line; do qdel $line; done
	else
                echo "reset not valid for serial submission"
	fi
	exit 0
fi
#echo $RESET
basecmd="snakemake"
if [[ $RUNMODE == "trim_illumina" ]]; then
	basecmd=$basecmd" illumina_trim"
elif [[ $RUNMODE == "eval_illumina" ]]; then
	basecmd=$basecmd" eval_illumina"
elif [[ $RUNMODE == "assemble_short" ]]; then
	basecmd=$basecmd" assemble_short"
elif [[ $RUNMODE == "assemble_long" ]]; then
	basecmd=$basecmd" assemble_long"
elif [[ $RUNMODE == "assemble" ]]; then
	basecmd=$basecmd" assemble"
elif [[ $RUNMODE == "evaluate" ]]; then
	basecmd=$basecmd" quastall"
else
	echo "Runmode not recognized: "$RUNMODE
	exit 1
fi
basecmd=$basecmd" --configfile $CFILE --use-singularity --jobs $NJOBS $STDSMARGS $SM_ARGS $DRY"
if [[ ! -z "$SI_ARGS" ]]; then basecmd=$basecmd" --singularity-args \"$SI_ARGS\""; fi

if [[ $CLUSTER == "slurm" ]]; then
	basecmd=$basecmd" --cluster-config $CLUSTER_CONFIG --cluster '$(pwd)/bin/immediate_submit/immediate_submit.py {dependencies} slurm' --immediate-submit"
  elif [[ $CLUSTER == "sge" ]]; then
        basecmd=$basecmd" --cluster-config $CLUSTER_CONFIG --cluster '$(pwd)/bin/immediate_submit/immediate_submit.py {dependencies} sge' --immediate-submit"
  elif [[ $CLUSTER == "torque" ]]; then
        basecmd=$basecmd" --cluster-config $CLUSTER_CONFIG --cluster '$(pwd)/bin/immediate_submit/immediate_submit.py {dependencies} torque' --immediate-submit"
  else
  	if [[ $CLUSTER != "serial" ]]; then
		echo "Submission system not recognized"
		exit 1
	fi
fi

#specify selection
if [[ ! -z $SELECT ]]; then basecmd=$basecmd" --config select=\""$SELECT"\""; fi

#execute
echo $basecmd

